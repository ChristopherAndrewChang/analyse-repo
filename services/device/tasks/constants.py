from idvalid_integration.tasks import constants


EXCHANGE_PUBLISHER = constants.EXCHANGE_PUBLISHER

QUEUE_CONSUME = "idvalid.device.consume"

ROUTING_CONSUME_AUTH_USER_LOGGED_IN = (
    f"{constants.ROUTING_AUTH_PUBLISH_PREFIX}.logged-in")
TASK_CONSUME_AUTH_USER_LOGGED_IN = constants.TASK_CONSUME_AUTH_USER_LOGGED_IN
ROUTING_CONSUME_AUTH_PLATFORM_CREATE = (
    f"{constants.ROUTING_AUTH_PLATFORM_PUBLISH_PREFIX}.create")
TASK_CONSUME_AUTH_PLATFORM_CREATE = constants.TASK_CONSUME_AUTH_PLATFORM_CREATE
ROUTING_CONSUME_AUTH_PLATFORM_UPDATE = (
    f"{constants.ROUTING_AUTH_PLATFORM_PUBLISH_PREFIX}.update")
TASK_CONSUME_AUTH_PLATFORM_UPDATE = constants.TASK_CONSUME_AUTH_PLATFORM_UPDATE
ROUTING_CONSUME_AUTH_PLATFORM_DELETE = (
    f"{constants.ROUTING_AUTH_PLATFORM_PUBLISH_PREFIX}.delete")
TASK_CONSUME_AUTH_PLATFORM_DELETE = constants.TASK_CONSUME_AUTH_PLATFORM_DELETE
ROUTING_CONSUME_AUTH_SESSION_DELETE = (
    f"{constants.ROUTING_AUTH_SESSION_PUBLISH_PREFIX}.delete")
TASK_CONSUME_AUTH_SESSION_DELETE = constants.TASK_CONSUME_AUTH_SESSION_DELETE


EXCHANGE = constants.EXCHANGE_DEVICE

QUEUE_SIGNAL = "idvalid.device.signal"
ROUTING_SIGNAL = "device.signal"

TASK_SIGNAL_DEVICE_POST_DELETE = "idvalid.device.signal.device.post_delete"
TASK_SIGNAL_DEVICE_POST_REVOKE = "idvalid.device.signal.device.post_revoke"

QUEUE_INTERNAL = "idvalid.device"
ROUTING_INTERNAL = "idvalid.internal"

TASK_DEVICE_CREATE_HISTORY = "idvalid.device.internal.device.create_history"
