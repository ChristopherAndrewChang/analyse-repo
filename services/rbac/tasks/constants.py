from idvalid_integration.tasks import constants


EXCHANGE_PUBLISHER = constants.EXCHANGE_PUBLISHER

QUEUE_CONSUME = "idvalid.rbac.consume"

ROUTING_CONSUME_AUTH_ACCOUNT_CREATE = (
    f"{constants.ROUTING_AUTH_ACCOUNT_PUBLISH_PREFIX}.create")
TASK_CONSUME_AUTH_ACCOUNT_CREATE = constants.TASK_CONSUME_AUTH_ACCOUNT_CREATE
ROUTING_CONSUME_AUTH_USER_ACTIVE_FLAG = (
    f"{constants.ROUTING_AUTH_USER_PUBLISH_PREFIX}.active-flag")
TASK_CONSUME_AUTH_USER_ACTIVE_FLAG = constants.TASK_CONSUME_AUTH_USER_ACTIVE_FLAG
ROUTING_CONSUME_AUTH_PROFILE_UPDATE = (
    f"{constants.ROUTING_AUTH_PROFILE_PUBLISH_PREFIX}.update")
TASK_CONSUME_AUTH_PROFILE_UPDATE = constants.TASK_CONSUME_AUTH_PROFILE_UPDATE

ROUTING_CONSUME_TENANT_PUBLISH = (
    f"{constants.ROUTING_TENANT_PUBLISH_PREFIX}")
TASK_CONSUME_TENANT_PUBLISH = constants.TASK_CONSUME_TENANT_PUBLISH
ROUTING_CONSUME_TENANT_USER_PUBLISH = (
    f"{constants.ROUTING_TENANT_USER_PUBLISH_PREFIX}")
TASK_CONSUME_TENANT_USER_PUBLISH = constants.TASK_CONSUME_TENANT_USER_PUBLISH
ROUTING_CONSUME_TENANT_USER_DELETE = (
    f"{constants.ROUTING_TENANT_USER_PUBLISH_PREFIX}.delete")
TASK_CONSUME_TENANT_USER_DELETE = constants.TASK_CONSUME_TENANT_USER_DELETE


EXCHANGE = constants.EXCHANGE_RBAC

QUEUE_SIGNAL = "idvalid.rbac.signal"
ROUTING_SIGNAL = "rbac.signal"
TASK_SIGNAL_ROLE_USER_POST_CREATE = "idvalid.rbac.signal.role_user.post_create"
TASK_SIGNAL_ROLE_USER_POST_DELETE = "idvalid.rbac.signal.role_user.post_delete"
