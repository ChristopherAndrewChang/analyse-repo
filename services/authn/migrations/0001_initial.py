# Generated by Django 4.2.21 on 2025-05-14 07:15

import authn.generators
import authn.models.account.user
import authn.models.change_email
import authn.models.forget_password
import authn.models.platform
import authn.models.totp_device
import authn.models.two_fa.backup_code
import authn.models.two_fa.mobile
import authn.models.two_fa.passkey
import authn.models.two_fa.totp
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import idvalid_core.generators
import idvalid_core.validators
import phonenumber_field.modelfields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subid', models.CharField(blank=True, db_column='subid', default=idvalid_core.generators.default_subid_generator, editable=False, help_text='Primary key shown to user.', max_length=64, null=True, unique=True, verbose_name='subid')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and ./_ only.', max_length=150, unique=True, validators=[idvalid_core.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('email', models.EmailField(blank=True, max_length=254, null=True, unique=True, verbose_name='email address')),
                ('phone', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, null=True, region=None, unique=True, verbose_name='phone')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('account_id', models.CharField(blank=True, max_length=64, null=True, unique=True, verbose_name='account id')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
            managers=[
                ('objects', authn.models.account.user.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Email',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subid', models.CharField(blank=True, db_column='subid', default=idvalid_core.generators.default_subid_generator, editable=False, help_text='Primary key shown to user.', max_length=64, null=True, unique=True, verbose_name='subid')),
                ('address', models.EmailField(max_length=254, unique=True, verbose_name='address')),
                ('resend_date', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='resend_date')),
                ('is_registered', models.BooleanField(default=False, editable=False, verbose_name='registered flag')),
                ('registered_date', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='registered')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='created')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OtpToken',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subid', models.TextField(verbose_name='subid')),
                ('token', models.TextField(verbose_name='token')),
                ('expires', models.DateTimeField(default=authn.generators.generate_enrollment_token_expires, verbose_name='expires')),
                ('applied', models.BooleanField(default=False, verbose_name='applied flag')),
                ('applied_time', models.DateTimeField(blank=True, null=True, verbose_name='applied time')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='created time')),
            ],
        ),
        migrations.CreateModel(
            name='Phone',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subid', models.CharField(blank=True, db_column='subid', default=idvalid_core.generators.default_subid_generator, editable=False, help_text='Primary key shown to user.', max_length=64, null=True, unique=True, verbose_name='subid')),
                ('number', phonenumber_field.modelfields.PhoneNumberField(max_length=128, region=None, unique=True, verbose_name='phone')),
                ('resend_date', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='resend date')),
                ('is_registered', models.BooleanField(default=False, editable=False, verbose_name='registered flag')),
                ('registered_date', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='registered')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='created')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Platform',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subid', models.CharField(blank=True, db_column='subid', default=idvalid_core.generators.default_subid_generator, editable=False, help_text='Primary key shown to user.', max_length=64, null=True, unique=True, verbose_name='subid')),
                ('private_key_der', models.BinaryField(default=authn.models.platform.generate_private_key_der, verbose_name='private key der')),
                ('salt', models.BinaryField(default=authn.models.platform.generate_salt, verbose_name='salt')),
                ('name', models.CharField(max_length=150, verbose_name='name')),
                ('platform_type', models.CharField(choices=[('mobile', 'Mobile'), ('desktop', 'Desktop'), ('web', 'Web'), ('other', 'Other')], default='web', max_length=32, verbose_name='platform type')),
                ('is_deleted', models.BooleanField(default=False, editable=False, verbose_name='deleted flag')),
                ('deleted_time', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='deleted time')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Tenant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subid', models.CharField(blank=True, db_column='subid', default=idvalid_core.generators.default_subid_generator, editable=False, help_text='Primary key shown to user.', max_length=64, null=True, unique=True, verbose_name='subid')),
                ('is_active', models.BooleanField(verbose_name='active flag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TOTPDevice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subid', models.CharField(blank=True, db_column='subid', default=idvalid_core.generators.default_subid_generator, editable=False, help_text='Primary key shown to user.', max_length=64, null=True, unique=True, verbose_name='subid')),
                ('secret', models.BinaryField(default=authn.models.totp_device.generate_secret, max_length=40, verbose_name='secret')),
                ('step', models.PositiveSmallIntegerField(default=30, help_text='The time step in seconds.', verbose_name='step')),
                ('start_time', models.DateTimeField(default=authn.models.totp_device.generate_start_time, help_text='The datetime at which to begin counting steps.', verbose_name='start time')),
                ('digits', models.PositiveSmallIntegerField(choices=[(6, 6), (7, 7), (8, 8), (9, 9)], default=6, help_text='The number of digits to expect in a token.', verbose_name='digits')),
                ('tolerance', models.PositiveSmallIntegerField(default=1, help_text='The number of time steps in the past or future to allow.', verbose_name='tolerance')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UserLog',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='log', serialize=False, to=settings.AUTH_USER_MODEL, verbose_name='user')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('admin_last_login', models.DateTimeField(blank=True, null=True, verbose_name='admin last login')),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='profile', serialize=False, to=settings.AUTH_USER_MODEL, verbose_name='user')),
                ('name', models.CharField(blank=True, max_length=256, null=True, verbose_name='name')),
            ],
        ),
        migrations.CreateModel(
            name='TOTP',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subid', models.CharField(blank=True, db_column='subid', default=idvalid_core.generators.default_subid_generator, editable=False, help_text='Primary key shown to user.', max_length=64, null=True, unique=True, verbose_name='subid')),
                ('secret', models.BinaryField(default=authn.models.two_fa.totp.generate_secret, max_length=40, verbose_name='secret')),
                ('algorithm', models.CharField(choices=[('sha1', 'SHA1'), ('sha256', 'SHA256'), ('sha512', 'SHA512')], default='sha1', max_length=16, verbose_name='algorithm')),
                ('digits', models.PositiveSmallIntegerField(choices=[(6, 6), (7, 7), (8, 8), (9, 9)], default=6, help_text='The number of digits to expect in a token.', verbose_name='digits')),
                ('period', models.PositiveSmallIntegerField(default=30, help_text='The token period in seconds.', verbose_name='period')),
                ('t0', models.BigIntegerField(default=0, help_text='The Unix time at which to begin counting steps.', verbose_name='t0')),
                ('tolerance', models.PositiveSmallIntegerField(default=1, help_text='The number of time steps in the past or future to allow.', verbose_name='tolerance')),
                ('drift', models.SmallIntegerField(default=0, help_text='The number of time steps the prover is known to deviate from our clock.', verbose_name='drift')),
                ('last_t', models.BigIntegerField(default=-1, help_text='The t value of the latest verified token. The next token must be at a higher time step.', verbose_name='last t')),
                ('confirmed', models.BooleanField(default=False, help_text='Is this device ready for use?', verbose_name='confirmed')),
                ('confirmed_at', models.DateTimeField(blank=True, help_text='A date and time when this device was confirmed.', null=True, verbose_name='confirmed at')),
                ('description', models.TextField(blank=True, null=True, verbose_name='description')),
                ('failure_timestamp', models.DateTimeField(blank=True, help_text='A timestamp of the last failed verification attempt. Null if last attempt succeeded.', null=True, verbose_name='failure timestamp')),
                ('failure_count', models.PositiveIntegerField(default=0, help_text='Number of successive failed attempts.', verbose_name='failure count')),
                ('last_used_at', models.DateTimeField(blank=True, help_text='The most recent date and time this device was used.', null=True, verbose_name='last used at')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The date and time when this device was initially created in the system.', verbose_name='created at')),
                ('disabled', models.BooleanField(default=False, verbose_name='disabled')),
                ('disabled_at', models.DateTimeField(blank=True, null=True, verbose_name='disabled at')),
                ('created_by', models.ForeignKey(blank=True, help_text='The creator of this device.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_totp_set', to=settings.AUTH_USER_MODEL, verbose_name='created by')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Session',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subid', models.CharField(blank=True, db_column='subid', default=idvalid_core.generators.default_subid_generator, editable=False, help_text='Primary key shown to user.', max_length=64, null=True, unique=True, verbose_name='subid')),
                ('device_id', models.CharField(max_length=64, verbose_name='device id')),
                ('last_auth_time', models.DateTimeField(blank=True, null=True, verbose_name='last auth time')),
                ('is_mobile', models.BooleanField(default=False, verbose_name='mobile status')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('platform', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sessions', to='authn.platform', verbose_name='platform')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sessions', to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
            options={
                'unique_together': {('user', 'platform', 'device_id')},
            },
        ),
        migrations.CreateModel(
            name='SecurityCode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subid', models.CharField(blank=True, db_column='subid', default=idvalid_core.generators.default_subid_generator, editable=False, help_text='Primary key shown to user.', max_length=64, null=True, unique=True, verbose_name='subid')),
                ('pin', models.CharField(max_length=128, verbose_name='pin')),
                ('failure_timestamp', models.DateTimeField(blank=True, help_text='A timestamp of the last failed verification attempt. Null if last attempt succeeded.', null=True, verbose_name='failure timestamp')),
                ('failure_count', models.PositiveIntegerField(default=0, help_text='Number of successive failed attempts.', verbose_name='failure count')),
                ('last_used_at', models.DateTimeField(blank=True, help_text='The most recent date and time this device was used.', null=True, verbose_name='last used at')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The date and time when this device was initially created in the system.', verbose_name='created at')),
                ('disabled', models.BooleanField(default=False, verbose_name='disabled')),
                ('disabled_at', models.DateTimeField(blank=True, null=True, verbose_name='disabled at')),
                ('created_by', models.ForeignKey(blank=True, help_text='The creator of this device.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_security_code_set', to=settings.AUTH_USER_MODEL, verbose_name='created by')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RefreshToken',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subid', models.CharField(blank=True, db_column='subid', default=idvalid_core.generators.default_subid_generator, editable=False, help_text='Primary key shown to user.', max_length=64, null=True, unique=True, verbose_name='subid')),
                ('subject', models.CharField(blank=True, max_length=64, null=True, verbose_name='subject')),
                ('audience', models.CharField(blank=True, max_length=64, null=True, verbose_name='audience')),
                ('not_before', models.DateTimeField(blank=True, null=True, verbose_name='not before')),
                ('issued_at', models.DateTimeField(auto_now_add=True, verbose_name='issued at')),
                ('multi_factor_auth', models.BooleanField(default=False, verbose_name='multi factor authentication')),
                ('multi_factor_expires', models.DateTimeField(blank=True, null=True, verbose_name='multi factor expiration date')),
                ('multi_factor_ref', models.CharField(blank=True, max_length=64, null=True, verbose_name='multi factor reference')),
                ('extra_claims', models.JSONField(blank=True, null=True, verbose_name='extra claims')),
                ('plugins', models.JSONField(blank=True, null=True, verbose_name='plugin in ')),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='refresh_tokens', to='authn.session', verbose_name='session')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='platform',
            name='totp_device',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='platforms', to='authn.totpdevice', verbose_name='totp device'),
        ),
        migrations.CreateModel(
            name='PasskeyChallenge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subid', models.CharField(blank=True, db_column='subid', default=idvalid_core.generators.default_subid_generator, editable=False, help_text='Primary key shown to user.', max_length=64, null=True, unique=True, verbose_name='subid')),
                ('challenge', models.BinaryField(default=authn.models.two_fa.passkey.generate_challenge, max_length=64, verbose_name='challenge')),
                ('usage', models.CharField(choices=[('registration', 'Registration'), ('authentication', 'Authentication')], max_length=64, verbose_name='usage')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='passkey_challenges', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Passkey',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subid', models.CharField(blank=True, db_column='subid', default=idvalid_core.generators.default_subid_generator, editable=False, help_text='Primary key shown to user.', max_length=64, null=True, unique=True, verbose_name='subid')),
                ('is_active', models.BooleanField(default=True, verbose_name='active flag')),
                ('credential_id', models.BinaryField(db_index=True, unique=True, verbose_name='credential_id')),
                ('public_key', models.BinaryField(verbose_name='public key')),
                ('sign_count', models.PositiveIntegerField(verbose_name='sign count')),
                ('attestation_object', models.BinaryField(verbose_name='attestation object')),
                ('aaguid', models.CharField(max_length=36, verbose_name='aaguid')),
                ('last_used_at', models.DateTimeField(blank=True, null=True, verbose_name='last used at')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='passkeys', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MobileOTP',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subid', models.CharField(blank=True, db_column='subid', default=idvalid_core.generators.default_subid_generator, editable=False, help_text='Primary key shown to user.', max_length=64, null=True, unique=True, verbose_name='subid')),
                ('pin', models.CharField(blank=True, max_length=128, null=True, verbose_name='pin')),
                ('valid_until', models.DateTimeField(default=authn.models.two_fa.mobile.generate_valid_time, help_text='The timestamp of the moment of expiry of the saved token.', verbose_name='valid until')),
                ('state', models.BinaryField(blank=True, max_length=32, null=True, verbose_name='state')),
                ('confirmed', models.BooleanField(default=False, verbose_name='confirmed status')),
                ('accepted', models.BooleanField(default=False, verbose_name='accepted status')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True, verbose_name='created at')),
                ('user', models.ForeignKey(help_text='The user that this device belongs to.', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ForgetPasswordState',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('resend_date', models.DateTimeField(blank=True, default=authn.models.forget_password.default_otp_resend, editable=False, null=True, verbose_name='resend_date')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='fp_state', to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
        ),
        migrations.CreateModel(
            name='ForgetPassword',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subid', models.CharField(blank=True, db_column='subid', default=idvalid_core.generators.default_subid_generator, editable=False, help_text='Primary key shown to user.', max_length=64, null=True, unique=True, verbose_name='subid')),
                ('device_id', models.CharField(max_length=64, verbose_name='device id')),
                ('state', models.CharField(max_length=128, verbose_name='state')),
                ('user_agent', models.TextField(verbose_name='user agent')),
                ('expires', models.DateTimeField(default=authn.models.forget_password.default_otp_expires, verbose_name='expired date')),
                ('suppressed', models.BooleanField(default=False, verbose_name='suppressed flag')),
                ('suppressed_time', models.DateTimeField(blank=True, null=True, verbose_name='suppressed time')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='created')),
                ('otp_token', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='authn.otptoken', verbose_name='otp token')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='forget_passwords', to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Enrollment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subid', models.CharField(blank=True, db_column='subid', default=idvalid_core.generators.default_subid_generator, editable=False, help_text='Primary key shown to user.', max_length=64, null=True, unique=True, verbose_name='subid')),
                ('device_id', models.CharField(max_length=64, verbose_name='device id')),
                ('state', models.CharField(max_length=128, verbose_name='state')),
                ('user_agent', models.TextField(verbose_name='user agent')),
                ('expires', models.DateTimeField(default=authn.generators.generate_enrollment_otp_expires, verbose_name='expired date')),
                ('suppressed', models.BooleanField(default=False, verbose_name='suppressed flag')),
                ('suppressed_time', models.DateTimeField(blank=True, null=True, verbose_name='suppressed time')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='created')),
                ('email', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='enrollments', to='authn.email', verbose_name='email')),
                ('otp_token', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='authn.otptoken', verbose_name='otp token')),
                ('phone', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='enrollments', to='authn.phone', verbose_name='phone')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='EmailOTP',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subid', models.CharField(blank=True, db_column='subid', default=idvalid_core.generators.default_subid_generator, editable=False, help_text='Primary key shown to user.', max_length=64, null=True, unique=True, verbose_name='subid')),
                ('name', models.CharField(blank=True, help_text='The human-readable name of this device.', max_length=64, null=True)),
                ('confirmed', models.BooleanField(default=True, help_text='Is this device ready for use?')),
                ('pin', models.CharField(blank=True, max_length=128, null=True, verbose_name='pin')),
                ('valid_until', models.DateTimeField(default=django.utils.timezone.now, help_text='The timestamp of the moment of expiry of the saved token.', verbose_name='valid until')),
                ('email', models.EmailField(blank=True, help_text='Optional alternative email address to send tokens to', max_length=254, null=True, verbose_name='email')),
                ('throttling_failure_timestamp', models.DateTimeField(blank=True, default=None, help_text='A timestamp of the last failed verification attempt. Null if last attempt succeeded.', null=True, verbose_name='throttling failure timestamp')),
                ('throttling_failure_count', models.PositiveIntegerField(default=0, help_text='Number of successive failed attempts.', verbose_name='throttling failure count')),
                ('last_generated_timestamp', models.DateTimeField(blank=True, help_text='The last time a token was generated for this device.', null=True, verbose_name='last generated timestamp')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The date and time when this device was initially created in the system.', null=True, verbose_name='created at')),
                ('last_used_at', models.DateTimeField(blank=True, help_text='The most recent date and time this device was used.', null=True, verbose_name='last used at')),
                ('user', models.ForeignKey(help_text='The user that this device belongs to.', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ChangeEmail',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subid', models.CharField(blank=True, db_column='subid', default=idvalid_core.generators.default_subid_generator, editable=False, help_text='Primary key shown to user.', max_length=64, null=True, unique=True, verbose_name='subid')),
                ('email', models.EmailField(max_length=254, verbose_name='email')),
                ('device_id', models.CharField(max_length=64, verbose_name='device id')),
                ('state', models.CharField(max_length=128, verbose_name='state')),
                ('user_agent', models.TextField(verbose_name='user agent')),
                ('expires', models.DateTimeField(default=authn.models.change_email.default_otp_expires, verbose_name='expired date')),
                ('suppressed', models.BooleanField(default=False, verbose_name='suppressed flag')),
                ('suppressed_time', models.DateTimeField(blank=True, null=True, verbose_name='suppressed time')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='created')),
                ('otp_token', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='authn.otptoken', verbose_name='otp token')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='change_emails', to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BackupCode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subid', models.CharField(blank=True, db_column='subid', default=idvalid_core.generators.default_subid_generator, editable=False, help_text='Primary key shown to user.', max_length=64, null=True, unique=True, verbose_name='subid')),
                ('throttling_failure_timestamp', models.DateTimeField(blank=True, default=None, help_text='A timestamp of the last failed verification attempt. Null if last attempt succeeded.', null=True, verbose_name='throttling failure timestamp')),
                ('throttling_failure_count', models.PositiveIntegerField(default=0, help_text='Number of successive failed attempts.', verbose_name='throttling failure count')),
                ('last_generated_timestamp', models.DateTimeField(blank=True, default=django.utils.timezone.now, help_text='The last time a token was generated for this device.', null=True, verbose_name='last generated timestamp')),
                ('codes', models.JSONField(default=authn.models.two_fa.backup_code.generate_codes, verbose_name='codes')),
                ('used_codes', models.JSONField(default=list, verbose_name='used codes')),
                ('is_active', models.BooleanField(default=True, verbose_name='active flag')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='The date and time when this device was initially created in the system.', null=True, verbose_name='created at')),
                ('last_used_at', models.DateTimeField(blank=True, help_text='The most recent date and time this device was used.', null=True, verbose_name='last used at')),
                ('created_by', models.ForeignKey(blank=True, help_text='The creator of this backup code.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_backup_code_set', to=settings.AUTH_USER_MODEL, verbose_name='created by')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UserMFA',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='mfa', serialize=False, to=settings.AUTH_USER_MODEL, verbose_name='user')),
                ('passkey_device_count', models.PositiveIntegerField(default=0, verbose_name='passkey device count')),
                ('mobile_logged_in_count', models.PositiveIntegerField(default=0, verbose_name='mobile logged in count')),
                ('backup_code', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='authn.backupcode', verbose_name='backup code')),
                ('security_code', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='authn.securitycode', verbose_name='security code')),
                ('totp', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='authn.totp', verbose_name='totp')),
            ],
        ),
        migrations.CreateModel(
            name='TenantUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_owner', models.BooleanField(default=False, verbose_name='owner status')),
                ('is_registered', models.BooleanField(default=False, verbose_name='registered status')),
                ('is_active', models.BooleanField(default=True, verbose_name='active status')),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='authn.tenant', verbose_name='tenant')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
            options={
                'unique_together': {('tenant', 'user')},
            },
        ),
        migrations.CreateModel(
            name='RTPluginTenant',
            fields=[
                ('refresh_token', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='authn.refreshtoken', verbose_name='refresh token')),
                ('tenant_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='authn.tenantuser', verbose_name='tenant user')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RoleUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tenant_id', models.PositiveBigIntegerField(verbose_name='tenant id')),
                ('role_id', models.PositiveBigIntegerField(verbose_name='role id')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
            options={
                'unique_together': {('tenant_id', 'role_id', 'user')},
            },
        ),
    ]
